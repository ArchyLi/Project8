    #include<stdio.h>    
    #include<stdlib.h>    
    #include<sys/types.h>    
    #include<sys/socket.h>    
    #include<arpa/inet.h>    
    #include<netinet/in.h>    
    #include<sys/select.h>    
    #include<sys/time.h>    
    #include<unistd.h>    
    #include<string.h>    
    static void usage(const  char *proc)  
    {  
        printf("Usage :%s [local_ip] [local_port]\n", proc);  
    }  
    //定义文件描述符数组 存储需要等待的文件描述符    
    int  readfds[sizeof(fd_set) * 8];  
      
    //建立监听服务器    
    int startup(char* ip, int port)  
    {  
        //建立套接字    
        int sock = socket(AF_INET, SOCK_STREAM, 0);  
        if (sock < 0)  
        {  
            perror("socket");  
            exit(1);  
        }  
        struct  sockaddr_in  local;  
        local.sin_family = AF_INET;  
        local.sin_port = htons(port);  
        local.sin_addr.s_addr = inet_addr(ip);  
        //绑定本地ip与端口    
        if (bind(sock, (struct sockaddr*)&local, sizeof(local))< 0)  
        {  
            perror("bind");  
            exit(2);  
        }  
        //设置服务器状态为监听状态    
        if (listen(sock, 5)<  0)  
        {  
            perror("listen");  
            exit(3);  
        }  
        return sock;  
    }  
    int main(int argc, char * argv[])  
    {  
        if (argc != 3)  
        {  
            usage(argv[0]);  
            return 4;  
        }  
        int listen_sock = startup(argv[1], atoi(argv[2]));  
        int  i = 1;  
        int  num = sizeof(fd_set) * 8;  
        readfds[0] = listen_sock;  
        for (; i < num; ++i)  
        {  
            readfds[i] = -1;  
        }  
        //定义两个文件描述符集，来表述要等到的文件描述符    
        fd_set wfds, rfds;  
        char buf[1024];  
        while (1)  
        {  
            int maxfd = -1;  
            //给文件描述符集初始化，并设置要等待的文件描述    
            FD_ZERO(&rfds);  
            for (i = 0; i <num; ++i)  
            {  
                if (readfds[i] != -1)  
                {  
                    FD_SET(readfds[i], &rfds);  
                }  
                //得到最大的文件描述符    
                maxfd = maxfd < readfds[i] ? readfds[i] : maxfd;  
            }  
            //设置成是5秒select    
            struct timeval time = { 1,0 };  
            int n = select(maxfd + 1, &rfds, &wfds, NULL, &time);  
            switch (n)  
            {  
                //表示的时间结束    
            case 0:  
                printf("time out ..\n");  
                break;  
                //表示的select失败    
            case -1:  
                break;  
                //至少有有一个文件描述符就绪    
            default:  
            {  
                i = 0;  
                //检查哪个文件描述符就绪    
                for (; i < num; ++i)  
                {  
                    //表示的是监听服务器就绪    
                    if (i == 0 && FD_ISSET(readfds[i], &rfds))  
                    {  
                        struct sockaddr_in client;  
                        socklen_t  len = sizeof(client);  
                        //accep来接受客户端    
                        int client_sock = accept(listen_sock, (struct sockaddr*)&client, &len);  
                        if (client_sock< 0)  
                        {  
                            perror("accept");  
                            continue;  
                        }  
                        else  
                        {  
                            //将客户端的套接字放到要等待的文件描述符数组中    
                            int j = 0;  
                            for (j = 1; j <num; ++j)  
                            {  
                                if (readfds[j] == -1)  
                                {  
                                    readfds[j] = client_sock;  
                                    break;  
                                }  
                            }  
                            //要是j>num表示的是文件描述符数组已满    
                            if (j >= num)  
                            {  
                                printf("readfds is full\n");  
                                return  5;  
                            }  
                        }  
                    }  
                    //等待的普通文件秘书符就位    
                    if (i != 0 && FD_ISSET(readfds[i], &rfds))  
                    {  
                        //先读数据    
                        int s = read(readfds[i], buf, sizeof(buf) - 1);  
                        if (s < 0)  
                        {  
                            perror("read");  
                            return 6;  
                        }  
                        else if (s == 0)  
                        {  
                            printf("client quit\n");  
                            readfds[i] = -1;  
                            close(readfds[i]);  
                            continue;  
                        }  
                        else  
                        {  
                            buf[s] = 0;  
                            printf("client#: %s\n", buf);  
                            fflush(stdout);  
                            //读完之后直接将读到的数据返给客户端    
                            write(readfds[i], buf, strlen(buf));  
                        }  
                    }  
                }  
                break;  
            }  
            }  
        }  
        return 0;  
    }   
